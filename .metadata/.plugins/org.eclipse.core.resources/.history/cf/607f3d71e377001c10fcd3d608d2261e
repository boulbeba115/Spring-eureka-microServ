package tn.iit.web;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.apache.commons.io.FilenameUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import tn.iit.models.DemandeImpression;
import tn.iit.services.DemandeImpService;
import tn.iit.utils.FileUploadProperties;

@RestController
@RequestMapping("demandes")
@CrossOrigin(origins = "*", methods = { RequestMethod.POST, RequestMethod.OPTIONS }, allowedHeaders = { "Content-Type",
		"X-Requested-With", "accept", "Origin", "Access-Control-Request-Method",
		"Access-Control-Request-Headers" }, exposedHeaders = { "Access-Control-Allow-Origin",
				"Access-Control-Allow-Credentials" })
public class DemandeImpController {

	private final DemandeImpService demandeImpService;
	private final Path documentPath;

	@Autowired
	public DemandeImpController(final DemandeImpService demandeImpService,
			final FileUploadProperties fileUploadProperties) {
		super();
		this.demandeImpService = demandeImpService;
		this.documentPath = Paths.get(fileUploadProperties.getLocation()).toAbsolutePath().normalize();
	}

	@GetMapping
	public List<DemandeImpression> getAllDemandesImp() {
		return demandeImpService.getAllDemandesImp();
	}

	@GetMapping("{id}")
	public Optional<DemandeImpression> getDemandeById(@PathVariable long id) {
		return demandeImpService.getDemandeById(id);
	}

	@PostMapping
	public DemandeImpression saveDemandeImp(@RequestBody DemandeImpression demandeImp) {
		return demandeImpService.saveDemandeImp(demandeImp);
	}

	@RequestMapping(value = "document", method = RequestMethod.POST, consumes = { "multipart/form-data" })
	public ResponseEntity<String> uploadFile(@RequestParam("file") MultipartFile file) throws IOException {
		FileOutputStream fout = null;
		try {
			String extension = FilenameUtils.getExtension(file.getOriginalFilename());

			String imgname = UUID.randomUUID().toString() + extension;
			String fullpath = this.documentPath.toString() + "/" + imgname;
			File convertFile = new File(fullpath);
			convertFile.createNewFile();
			fout = new FileOutputStream(convertFile);
			fout.write(file.getBytes());
			return new ResponseEntity<String>(fullpath, HttpStatus.CREATED);
		} catch (IOException e) {
			return new ResponseEntity<String>(e.getMessage(), HttpStatus.BAD_REQUEST);
		} finally {
			fout.close();
		}

	}

}
