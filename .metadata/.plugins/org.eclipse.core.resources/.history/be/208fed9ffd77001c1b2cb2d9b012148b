package tn.iit.web;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.apache.commons.io.FilenameUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import tn.iit.dto.Enseignant;
import tn.iit.dto.Matiere;
import tn.iit.models.DemandeImpression;
import tn.iit.services.DemandeImpService;
import tn.iit.utils.FileUploadProperties;

@RestController
@RequestMapping("demandes")
@CrossOrigin
public class DemandeImpController {

	private final DemandeImpService demandeImpService;
	private final RestTemplate restTemplate;
	private final Path documentPath;

	@Autowired
	public DemandeImpController(final DemandeImpService demandeImpService, RestTemplate restTemplate,
			final FileUploadProperties fileUploadProperties) {
		super();
		this.demandeImpService = demandeImpService;
		this.restTemplate = restTemplate;
		this.documentPath = Paths.get(fileUploadProperties.getLocation()).toAbsolutePath().normalize();
	}

	@GetMapping
	public List<DemandeImpression> getAllDemandesImp() {
		return demandeImpService.getAllDemandesImp();
	}

	@GetMapping("{id}")
	public Optional<DemandeImpression> getDemandeById(@PathVariable long id) {
		return demandeImpService.getDemandeById(id);
	}

	@PostMapping
	public DemandeImpression saveDemandeImp(@RequestBody DemandeImpression demandeImp) {
		return demandeImpService.saveDemandeImp(demandeImp);
	}

	@RequestMapping(value = "document", method = RequestMethod.POST, consumes = { "multipart/form-data" })
	public ResponseEntity<String> uploadFile(@RequestParam("file") MultipartFile file) {
		FileOutputStream fout = null;
		try {
			String extension = FilenameUtils.getExtension(file.getOriginalFilename());
			if (!extension.equals("pdf")) {
				return new ResponseEntity<String>("le document doit Ãªtre sous form de pdf", HttpStatus.BAD_REQUEST);
			}
			String imgname = UUID.randomUUID().toString() + "." + extension;
			String fullpath = this.documentPath.toString() + "\\" + imgname;
			File convertFile = new File(fullpath);
			convertFile.createNewFile();
			fout = new FileOutputStream(convertFile);
			fout.write(file.getBytes());
			fout.close();
			return new ResponseEntity<String>(fullpath, HttpStatus.CREATED);
		} catch (IOException e) {
			return new ResponseEntity<String>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}

	@GetMapping("/enseignant/list/{id}")
	List<DemandeImpression> getEnseignantDemandes(@PathVariable long id) {
		List<DemandeImpression> listDemandes = demandeImpService.getDemandeByEnsId(id);
		return listDemandes;
	}
	
	@GetMapping("test")
	public String test() {
		return getMatiere(1).getLabel() + "  " + getEnseignant(1).getCin();
	}
	private Matiere getMatiere(long id) {
		Matiere matiere = restTemplate.getForObject("http://ENSEIGNANT-SERVICE/matiere/" + id, Matiere.class);
		if (matiere != null)
			return matiere;
		return null;
	}
	private Enseignant getEnseignant(long id) {
		Enseignant matiere = restTemplate.getForObject("http://ENSEIGNANT-SERVICE/enseignants/id" + id, Enseignant.class);
		if (matiere != null)
			return matiere;
		return null;
	}

}
